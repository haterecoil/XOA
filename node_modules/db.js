/*

1. FONCTIONS DE BASE
2. GESTION DES ROOMS
3. GESTION ONLINE USERS


*/

var io = require("../server").sio;

db = module.exports = {
  mysql : require('mysql'),
  mySqlClient : null,
/*

===========   FONCTIONS DE BASE ============
connect
close
executeSelectQuery
executeInsertQuery
executeUpdateQuery

*/
  connect : function () {
    console.log("SQL : connected !");
    this.mysql = require('mysql');
    this.mySqlClient = this.mysql.createPool({
      host     : "127.0.0.1",
      port     : "8889",
      user     : "root",
      password : "root",
      database : "xoa-dev"
    });  
  },
 
  close : function() {
    this.mySqlClient.end();
    console.log("SQL : connection closed...")
  },
 
  executeSelectQuery : function( selectQuery, callbackResultFunction ) {
    console.log(this.mySqlClient);
    this.mySqlClient.getConnection( function(err, connection, selectQuery, callbackResultFunction){
      connection.query(
        selectQuery,
        function select(error, results, fields) {
          console.log("connection.query : done");
          if (error) {
            connection.release();
            throw error;
          }
     
          if ( results.length > 0 )  { 
            connection.release();
            callbackResultFunction(results);
          } else {
            connection.release();
            console.log("Pas de données");
          }
      });
    });
  },

  executeInsertQuery : function ( insertQuery, callbackFunction) {
    this.mySqlClient.getConnection( function(err, connection){
      connection.query(
        insertQuery,
        function checkInsert(error, result){
          if (error) throw error;

          callbackFunction(result);
          connection.release();
        }
      );
    });
  },

  executeUpdateQuery : function (updateQuery, callbackFunction) {
    console.log("Update : " + updateQuery);
    this.mySqlClient.getConnection( function(err, connection){
      connection.query(
        updateQuery,
        function checkUpdate(error) {
          if (error) throw error;
          connection.release();
          callbackFunction();
        }
      );
    });
  },
/*

              ===========   GESTIONS DES ROOMS ============
              createRoom
              deleteRoom
              getRoomMap
              updateRoomMap
              updatePosition

*/

// Cherche l'ID Max, puis crée une room avec IDMax +1 
  createRoom : function (roomID) {

    db.executeInsertQuery("INSERT INTO Rooms (roomID) VALUES ("+roomID+")",
      function()
      {

      }
    );



// DEPRECATED ? (rempalcé par uuid ?)    
    //SQL: sélectionner le MaxID
    // db.executeSelectQuery("SELECT Max(RoomID) FROM Rooms", function(results){
    //   // +1 au MaxID
    //   this.newRoomId = parseInt(results[0]['Max(RoomID)']+1);
    //   console.log("DB: new room id = " +this.newRoomId);
    //   //Enregistrer une nouvelle room
    //   db.executeInsertQuery("INSERT INTO Rooms (roomID) VALUES ('"+this.newRoomId+"')", 
    //     function() {
    //     console.log("DB: room created " + results[0] );
    //     }
    //   );
    // });


  },  

//lorsque l'UserMap est vide il faut supprimer l'enregistrement room
  deleteRoom : function () {
  
  },

//Récupère les informations d'une room donnée
//les envoie à l'utilisateur
  getRoomMap : function (roomID) {
    console.log("DB: getting room "+roomID+" info");
    db.executeSelectQuery(
      "SELECT userMap FROM Rooms WHERE roomID = '"+roomID+"' ",
      function(results) {
        return results;
      }
    );
  },

  //renvoie une nouvelle userMap à la base de données
  //@params
  //  newUserMap : objet JSON
  //  roomID : nombre
  updateRoomMap : function (newUserMap, roomID) {
    db.executeUpdateQuery(
      "UPDATE Rooms SET userMap = newUserMap WHERE roomID = ''",
      function(){
        //foo
      }
    );
  },

  updatePosition : function (socketId, posX, posY, angle) 
  {
    db.connect();
    db.mySqlClient.getConnection(function(err, connection){
      connection.query("UPDATE INTO OnlineUsers (IP, socketID, fullName ) VALUES ( '"+IP+"','"+socketID+"','"+fullName+"')",
        function(err)
        {
          if (err) throw err;
          connection.release();
          db.getOnlineUsers(IP)
        })
    })
  },


/*

              ===========   GESTIONS DES ONLINE USERS ============
              newOnlineUser ( IP, socketID, fullName)
              getOnlineUsers (IP)
              updateOnlineUser( user, column, newValu )

*/


//Insère un nouvel Utilisateur en base de donnée
//renvoie la liste des users
//@params:  IP, socketID, fullName
  newOnlineUser : function ( IP, socketID, fullName, callback) 
  {
    
  db.connect();
    db.mySqlClient.getConnection(function(err, connection)
    {
      connection.query("INSERT INTO OnlineUsers (IP, socketID, fullName ) VALUES ( '"+IP+"','"+socketID+"','"+fullName+"')",
        function(err, callback)
        {
          if (err) throw err;
          connection.release();
          callback;        
        }
      )
    })
  },

  //récupère la liste des users en ligne pour une IP donnée
  // #emit : onlineUserList
  // #todo : remplacer la requête SQL par une gestion par room !
  getOnlineUsers : function(IP) {
    console.log("getOnlineUsers "+IP);
    db.connect();
    db.mySqlClient.getConnection(function(err, connection){
      connection.query("SELECT * FROM OnlineUsers WHERE IP = '"+IP+"'",
      function(err, results){
        if (err) throw err;

        console.log("> get online users callback");
        //if (err) throw err;
        //envoie la liste à tous les utilisateurs partageant l'IP
        for (var i = 0; i < results.length; i++)
        {
          io.sockets.results[i].socketID.emit("onlineUserList", {list : results});
        }
        connection.release();
      })
    })
  },

  userIdFromSocketId : function(socketID) 
  {
    db.mySqlClient.getConnection(function(err, connection){
      connection.query("SELECT userID FROM OnlineUsers WHERE socketID = '"+socketID+"'",
      function(err, results){
        if (err) throw err;
        connection.release();
        console.log(results);
      })
    })
  },

  socketIdFromUserId : function(userId){
    db.mySqlClient.getConnection(function(err, connection){
      connection.query("SELECT socketID FROM OnlineUsers WHERE userID = '"+userId+"'",
      function(err, results){
        if (err) throw err;
        connection.release();
        console.log(results);
      })
    })
  },

  checkIfIP : function () 
  {
    //formater l'addresse ip
    db.executeSelectQuery("est ce que c référencé");
  }


};

















